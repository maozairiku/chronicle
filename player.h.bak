//=============================================================================
//
// プレイヤー処理 [player.h]
// Author : GP11B132 05 王ウ華
//
//=============================================================================
#pragma once

#include "main.h"
#include "renderer.h"
#include "debugproc.h"
#include "sprite.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define PLAYER_MAX			(1)		// プレイヤーのMax人数

#define	PLAYER_OFFSET_CNT	(16)	// 16分身

enum
{
	CHAR_DIR_UP,
	CHAR_DIR_RIGHT,
	CHAR_DIR_DOWN,
	CHAR_DIR_LEFT,

	CHAR_DIR_MAX
};

//*****************************************************************************
// 構造体定義
//*****************************************************************************

struct PLAYER
{
	BOOL		cpflag;			// collision flag
	float		pr;				// collision right
	float		pl;				// collision lift
	float		pu;				// collision up
	float		pd;				// collision down
	XMFLOAT3	pos;			// ポリゴンの座標
	XMFLOAT3	rot;			// ポリゴンの回転量
	BOOL		use;			// true:使っている  false:未使用
	BOOL		atkuse;			// atk flag
	float		w, h;			// 幅と高さ
	float		countAnim;		// アニメーションカウント
	int			patternAnim;	// アニメーションパターンナンバー
	int			texNo;			// テクスチャ番号
	
	int			dir;			// 向き（0:上 1:右 2:下 3:左）
	BOOL		moving;			// 移動中フラグ

	BOOL		dash;			// ダッシュ中フラグ
	XMFLOAT3	move;			// 移動速度
	XMFLOAT3	offset[PLAYER_OFFSET_CNT];		// 残像ポリゴンの座標

	BOOL		jump;			// ジャンプフラグ
	float		jumpY;			// ジャンプの高さ
	int			jumpCnt;		// ジャンプ中のカウント
	float		jumpYMax;		// ジャンプの高さ最大値

	BOOL		jumpD;			// 2段ジャンプフラグ
	float		jumpH;			// 2段ジャンプの高さ
	int			jumpDCnt;		// 2段ジャンプ中のカウント
	float		jumpDMax;		// 2段ジャンプの高さ最大値

	int			hp;				// HP
	int			lucky;
	int			potion;			// recover item1
	BOOL		penough;		// item1 enough
	int			apple;			// recover item2
	BOOL		aenough;		// item  enough

	int			conbox;			// conversation window
};


//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************
HRESULT InitPlayer(void);
void UninitPlayer(void);
void UpdatePlayer(void);
void DrawPlayer(void);

PLAYER* GetPlayer(void);



